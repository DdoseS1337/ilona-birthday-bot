import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Telegraf } from 'telegraf';
import * as cron from 'node-cron';
import { ConfigService } from '@nestjs/config';
import { DateTime } from 'luxon';

export interface BirthdayConfig {
  name: string;
  birthday: string; // Format: MM-DD
  chatId?: string; // Made optional since we'll auto-detect
  dailyMessages: string[];
  birthdayMessage: string;
  birthdayGifUrl?: string;
  timezone?: string;
  // New message types for different preparation periods
  twoWeeksMessages: string[]; // Messages for 2 weeks before birthday
  oneWeekMessages: string[]; // Messages for 1 week before birthday
  // Channel information
  channelId?: string; // Channel ID for sending messages
  channelUsername?: string; // Channel username (e.g., @mychannel)
  channelTitle?: string; // Channel title for display
}

@Injectable()
export class BirthdayBotService implements OnModuleInit {
  private readonly logger = new Logger(BirthdayBotService.name);
  private bot: Telegraf;
  private birthdayConfig: BirthdayConfig;

  private timezone: string;
  constructor(private configService: ConfigService) {
    this.bot = new Telegraf(
      this.configService.get<string>('TELEGRAM_BOT_TOKEN')!,
    );
    this.timezone = this.configService.get<string>('TIMEZONE', 'Europe/Kyiv');

    this.setupBirthdayConfig();
  }

  onModuleInit() {
    this.setupBot();
    this.scheduleDailyMessages();
  }
  private uaPlural(n: number, one: string, few: string, many: string) {
    const n10 = n % 10,
      n100 = n % 100;
    if (n10 === 1 && n100 !== 11) return one; // 1 –¥–µ–Ω—å
    if (n10 >= 2 && n10 <= 4 && (n100 < 12 || n100 > 14)) return few; // 2-4 –¥–Ω—ñ
    return many; // 5+ –¥–Ω—ñ–≤
  }

  daysWord = (n: number) => this.uaPlural(n, '–¥–µ–Ω—å', '–¥–Ω—ñ', '–¥–Ω—ñ–≤');
  hoursWord = (n: number) => this.uaPlural(n, '–≥–æ–¥–∏–Ω–∞', '–≥–æ–¥–∏–Ω–∏', '–≥–æ–¥–∏–Ω');
  minutesWord = (n: number) => this.uaPlural(n, '—Ö–≤–∏–ª–∏–Ω–∞', '—Ö–≤–∏–ª–∏–Ω–∏', '—Ö–≤–∏–ª–∏–Ω');

  private setupBirthdayConfig() {
    const dailyMessagesEnv = this.configService.get<string>(
      'DAILY_MESSAGES',
      '',
    );
    const dailyMessages = dailyMessagesEnv
      ? dailyMessagesEnv.split('|')
      : [
          'üéâ –õ—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∞—Ü—é—î: –ª–∏—à–∏–ª–æ—Å—å {days} {daysWord} –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name}. –ì–æ—Ç—É—î–º–æ—Å—å!',
          '‚è≥ {days} {daysWord} ‚Äî —ñ —Å–≤—è—Ç–∫—É—î–º–æ {name}! –ü–ª–∞–Ω—É—î–º–æ —Å—é—Ä–ø—Ä–∏–∑–∏ üòâ',
          'üéà –©–µ {days} {daysWord} –¥–æ –≤–µ–ª–∏–∫–æ–≥–æ –¥–Ω—è {name}. –ë–µ—Ä–µ–∂–µ–º–æ —Å–∏–ª–∏ –¥–ª—è –≤–µ—á—ñ—Ä–∫–∏!',
          'üéä –ß–∞—Å –ª–µ—Ç–∏—Ç—å! {days} {daysWord} ‚Äî —ñ —Å—Ç–∞—Ä—Ç—É—î —Å–≤—è—Ç–æ {name}.',
          'üåü {days} {daysWord} –¥–æ —Å–≤—è—Ç–∫—É–≤–∞–Ω–Ω—è {name}. –ü–æ—Ä–∞ –≥–æ—Ç—É–≤–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è!',
          'üéÅ {days} {daysWord} –¥–æ —Å—é—Ä–ø—Ä–∏–∑—ñ–≤ –¥–ª—è {name}! üéØ',
          'üíÉ {days} {daysWord} –¥–æ –≤–µ—á—ñ—Ä–∫–∏. –ü–ª–µ–π–ª–∏—Å—Ç —ñ —Ç–æ—Ä—Ç ‚Äî –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—ñ!',
          'üé≠ {days} {daysWord} ‚Äî —ñ –∑–∞–≤—ñ—Å–∞ –ø—ñ–¥–Ω—ñ–º–∞—î—Ç—å—Å—è. –°–≤—è—Ç–æ {name} –±–ª–∏–∑—å–∫–æ!',
          'üéÇ {days} {daysWord} –¥–æ —Å–æ–ª–æ–¥–∫–æ–≥–æ –¥–Ω—è {name}. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–±–∞–∂–∞–Ω–Ω—è!',
          'üìÖ {days} {daysWord} ‚Äî —Ç—Ä–∏–º–∞—î–º–æ —Ñ–æ–∫—É—Å –Ω–∞ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name}!',
        ];

    // Messages for 2 weeks before birthday (gift preparation phase)
    const twoWeeksMessages = [
      'üéÅ {days} {daysWord} –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name}! –ß–∞—Å –ø–æ—á–∞—Ç–∏ –¥—É–º–∞—Ç–∏ –ø—Ä–æ –ø–æ–¥–∞—Ä—É–Ω–æ—á–∫–∏! üíù',
      'üõçÔ∏è {days} {daysWord} ‚Äî —ñ–¥–µ–∞–ª—å–Ω–∏–π —á–∞—Å –¥–ª—è –ø–æ—à—É–∫—É –æ—Å–æ–±–ª–∏–≤–æ–≥–æ –ø–æ–¥–∞—Ä—É–Ω–∫–∞ –¥–ª—è {name}! ‚ú®',
      'üíù {days} {daysWord} –¥–æ —Å–≤—è—Ç–∞ {name}. –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –∑–∞–∑–∏—Ä–Ω—É—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–∏? üõí',
      'üéØ {days} {daysWord} –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name}! –ü–æ—Ä–∞ —Å–∫–ª–∞–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤! üìù',
      'üõí {days} {daysWord} ‚Äî —á–∞—Å –¥–ª—è —à–æ–ø—ñ–Ω–≥—É! –©–æ –± –∑—Ä–æ–±–∏—Ç–∏ {name} –ø—Ä–∏—î–º–Ω–æ? ü§î',
      'üíé {days} {daysWord} –¥–æ —Å–≤—è—Ç–∞ {name}. –ß–∞—Å —à—É–∫–∞—Ç–∏ —â–æ—Å—å –æ—Å–æ–±–ª–∏–≤–µ! ‚ú®',
      'üé® {days} {daysWord} –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name}! –ú–æ–∂–ª–∏–≤–æ, —Å—Ç–≤–æ—Ä–∏—Ç–∏ —â–æ—Å—å –≤–ª–∞—Å–Ω–æ—Ä—É—á? üñåÔ∏è',
    ];

    // Messages for 1 week before birthday (urgent preparation phase)
    const oneWeekMessages = [
      'üö® {days} {daysWord} –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name}! –•—Ç–æ —â–µ –Ω–µ –≤—Å—Ç–∏–≥ –∫—É–ø–∏—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ ‚Äî —á–∞—Å –¥—ñ—è—Ç–∏! ‚è∞',
      '‚ö° {days} {daysWord} ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å! –ü–æ–¥–∞—Ä—É–Ω–∫–∏ —Ç—Ä–µ–±–∞ –∫—É–ø—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑! üõçÔ∏è',
      'üî• {days} {daysWord} –¥–æ —Å–≤—è—Ç–∞ {name}! –û—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å –¥–ª—è —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ä—É–Ω–∫–∞! üíù',
      '‚è∞ {days} {daysWord} ‚Äî —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ! –ü–æ–¥–∞—Ä—É–Ω–∫–∏, –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, –≤—Å–µ —Ç—Ä–µ–±–∞ –≥–æ—Ç—É–≤–∞—Ç–∏! üéÅ',
      'üöÄ {days} {daysWord} –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name}! –û—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏! üí™',
      'üí• {days} {daysWord} ‚Äî —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å–ø—É—Ä—Ç! –í—Å—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –≥–æ—Ç–æ–≤—ñ! üéØ',
      '‚ö° {days} {daysWord} –¥–æ —Å–≤—è—Ç–∞ {name}! –ß–∞—Å –¥—ñ–π ‚Äî –∑–∞–ª–∏—à–∏–≤—Å—è –ª–∏—à–µ —Ç–∏–∂–¥–µ–Ω—å! üéä',
    ];

    this.birthdayConfig = {
      name: this.configService.get<string>('BIRTHDAY_NAME', '–Ü–ª–æ–Ω–∏'),
      birthday: this.configService.get<string>('BIRTHDAY_DATE', '11-2'),
      chatId: this.configService.get<string>('TELEGRAM_CHAT_ID'),
      dailyMessages: dailyMessages,
      birthdayMessage: this.configService.get<string>(
        'BIRTHDAY_MESSAGE',
        'üéâüéÇ –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name}! –í—ñ—Ç–∞—î–º–æ! –ë–∞–∂–∞—î–º–æ —Ä–∞–¥–æ—Å—Ç—ñ, —Å–∏–ª —ñ —è—Å–∫—Ä–∞–≤–∏—Ö –ø–æ–¥—ñ–π! ‚ú®',
      ),
      birthdayGifUrl: this.configService.get<string>('BIRTHDAY_GIF_URL'),
      timezone: this.configService.get<string>('TIMEZONE', 'Europe/Kyiv'),
      twoWeeksMessages: twoWeeksMessages,
      oneWeekMessages: oneWeekMessages,
      // Channel configuration
      channelId: this.configService.get<string>('TELEGRAM_CHANNEL_ID'),
      channelUsername: this.configService.get<string>(
        'TELEGRAM_CHANNEL_USERNAME',
      ),
      channelTitle: this.configService.get<string>('TELEGRAM_CHANNEL_TITLE'),
    };

    // Debug logging
    this.logger.log('Birthday config loaded:');
    this.logger.log(`- Name: ${this.birthdayConfig.name}`);
    this.logger.log(`- Birthday: ${this.birthdayConfig.birthday}`);
    this.logger.log(
      `- Daily messages count: ${this.birthdayConfig.dailyMessages.length}`,
    );
    this.logger.log(
      `- Birthday message: ${this.birthdayConfig.birthdayMessage.substring(0, 50)}...`,
    );
    this.logger.log(`- Chat ID: ${this.birthdayConfig.chatId || 'Not set'}`);
    this.logger.log(
      `- Channel ID: ${this.birthdayConfig.channelId || 'Not set'}`,
    );
    this.logger.log(
      `- Channel Title: ${this.birthdayConfig.channelTitle || 'Not set'}`,
    );
    this.logger.log(
      `- Channel Username: ${this.birthdayConfig.channelUsername || 'Not set'}`,
    );
  }

  private setupBot() {
    // Handle /start command
    this.bot.start((ctx) => {
      this.handleNewChat(ctx);
      const welcomeMessage = `–ü—Ä–∏–≤—ñ—Ç, –ª–µ–¥—ñ! üëã‚ú®\n\nüéÇ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –¥–Ω—ñ–≤ –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è ${this.birthdayConfig.name}! üéÇ\n\n–Ø –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–æ–±—ñ —â–æ–¥–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–æ–º –¥–æ –≤–µ–ª–∏–∫–æ–≥–æ –¥–Ω—è! üí´`;
      if (welcomeMessage.trim()) {
        ctx.reply(welcomeMessage);
      }
    });

    // Handle new chat members (when bot is added to a group/channel)
    this.bot.on('new_chat_members', (ctx) => {
      const botInfo = ctx.botInfo;
      const newMembers = ctx.message.new_chat_members;
      this.logger.log(`New chat members: ${newMembers}`);
      // Check if the bot itself was added
      const botAdded = newMembers.some((member) => member.id === botInfo.id);
      if (botAdded) {
        this.handleNewChat(ctx);
        const message = `–ü—Ä–∏–≤—ñ—Ç, –ª–µ–¥—ñ! üëã‚ú®\n\nüéÇ –Ø –±–æ—Ç –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –¥–Ω—ñ–≤ –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è ${this.birthdayConfig.name}! üéÇ\n\n–Ø –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–æ–º –¥–æ –≤–µ–ª–∏–∫–æ–≥–æ –¥–Ω—è! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /countdown —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫. üí´`;
        if (message.trim()) {
          ctx.reply(message);
        }
      }
    });

    // Handle when bot is added to a channel
    this.bot.on('channel_post', (ctx) => {
      if (
        ctx.channelPost &&
        'new_chat_members' in ctx.channelPost &&
        ctx.channelPost.new_chat_members
      ) {
        const botInfo = ctx.botInfo;
        const newMembers = ctx.channelPost.new_chat_members;

        const botAdded = newMembers.some((member) => member.id === botInfo.id);
        if (botAdded) {
          this.handleNewChat(ctx);
          const message = `–ü—Ä–∏–≤—ñ—Ç, –ª–µ–¥—ñ! üëã‚ú®\n\nüéÇ –Ø –±–æ—Ç –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –¥–Ω—ñ–≤ –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è ${this.birthdayConfig.name}! üéÇ\n\n–Ø –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–æ–º –¥–æ –≤–µ–ª–∏–∫–æ–≥–æ –¥–Ω—è! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /countdown —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫. üí´`;
          if (message.trim()) {
            ctx.reply(message);
          }
        }
      }
    });

    this.bot.command('countdown', (ctx) => {
      // Auto-detect and set chat/channel information when user uses countdown command
      this.handleNewChat(ctx);

      const countdown = this.calculateCountdown();
      const message = this.formatCountdownMessage(countdown);
      if (message.trim()) {
        ctx.reply(message);
      }
    });

    this.bot.command('help', (ctx) => {
      // Auto-detect and set chat/channel information when user uses help command
      this.handleNewChat(ctx);

      const message = `–ü—Ä–∏–≤—ñ—Ç, –ª–µ–¥—ñ! üëã‚ú®\n\n–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n/countdown - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫\n/status - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó\n/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏\n\n–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! üí´`;
      if (message.trim()) {
        ctx.reply(message);
      }
    });

    // Command to check current configuration
    this.bot.command('status', (ctx) => {
      // Auto-detect and set chat/channel information when user uses status command
      this.handleNewChat(ctx);

      const chatInfo = this.birthdayConfig.chatId
        ? `‚úÖ Chat ID: ${this.birthdayConfig.chatId}`
        : '‚ùå Chat ID: Not set';
      const channelInfo = this.birthdayConfig.channelId
        ? `‚úÖ Channel: ${this.birthdayConfig.channelTitle || 'Unknown'} (${this.birthdayConfig.channelId})`
        : '‚ùå Channel: Not set';
      const channelUsername = this.birthdayConfig.channelUsername
        ? `Username: ${this.birthdayConfig.channelUsername}`
        : 'Username: Not set';

      const message = `üìä **–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –±–æ—Ç–∞:**\n\n${chatInfo}\n${channelInfo}\n${channelUsername}\n\nüéÇ Birthday: ${this.birthdayConfig.name} (${this.birthdayConfig.birthday})\n‚è∞ Timezone: ${this.birthdayConfig.timezone}`;

      ctx.reply(message);
    });

    // Handle any text message to auto-detect chat/channel
    this.bot.on('text', (ctx) => {
      // Only auto-detect if no chat/channel is configured yet
      if (!this.birthdayConfig.chatId && !this.birthdayConfig.channelId) {
        this.handleNewChat(ctx);
      }
    });

    this.bot.launch();
    this.logger.log('Birthday bot started successfully!');
  }

  private handleNewChat(ctx: any) {
    const chatId = ctx.chat?.id?.toString();
    const chatType = ctx.chat?.type;
    const chatTitle = ctx.chat?.title;
    const chatUsername = ctx.chat?.username;

    if (chatId) {
      let chatInfoUpdated = false;
      let channelInfoUpdated = false;

      // Store chat information (always update if not set)
      if (!this.birthdayConfig.chatId) {
        this.birthdayConfig.chatId = chatId;
        this.logger.log(`Auto-detected chat ID: ${chatId}`);
        chatInfoUpdated = true;
      }

      // If it's a channel, store channel information (always update for channels)
      if (chatType === 'channel') {
        const wasChannelSet = !!this.birthdayConfig.channelId;
        this.birthdayConfig.channelId = chatId;
        this.birthdayConfig.channelTitle = chatTitle;
        this.birthdayConfig.channelUsername = chatUsername
          ? `@${chatUsername}`
          : undefined;

        if (!wasChannelSet) {
          this.logger.log(`Auto-detected channel: ${chatTitle} (${chatId})`);
          if (chatUsername) {
            this.logger.log(`Channel username: @${chatUsername}`);
          }
          channelInfoUpdated = true;
        } else {
          this.logger.log(`Updated channel info: ${chatTitle} (${chatId})`);
          channelInfoUpdated = true;
        }
      }

      // Only send welcome message for new chats or when explicitly called
      // This prevents spam when using /countdown or /help commands
      const shouldSendWelcome = chatInfoUpdated || channelInfoUpdated;

      if (shouldSendWelcome) {
        // Send a welcome message with current countdown
        setTimeout(async () => {
          try {
            const countdown = this.calculateCountdown();
            const message = this.formatCountdownMessage(countdown);

            // Validate message is not empty
            if (message && message.trim() !== '') {
              await ctx.reply(
                `–ü—Ä–∏–≤—ñ—Ç, –ª–µ–¥—ñ! üëã‚ú®\n\nüìÖ –ü–æ—Ç–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫:\n\n${message}`,
              );
            } else {
              await ctx.reply(
                `–ü—Ä–∏–≤—ñ—Ç, –ª–µ–¥—ñ! üëã‚ú®\n\nüìÖ –ü–æ—Ç–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫:\n\nüéâ –¢—ñ–ª—å–∫–∏ ${countdown.days} –¥–Ω—ñ–≤ –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è ${this.birthdayConfig.name}! üéÇ`,
              );
            }
          } catch (error) {
            this.logger.error('Error sending welcome countdown:', error);
          }
        }, 1000);
      }
    }
  }

  calculateCountdown(): {
    days: number;
    isBirthday: boolean;
    hours: number;
    minutes: number;
  } {
    const tz = this.birthdayConfig.timezone || 'Europe/Kyiv';
    const now = DateTime.now().setZone(tz);

    // –û—á—ñ–∫—É—î–º–æ BIRTHDAY_DATE —É —Ñ–æ—Ä–º–∞—Ç—ñ "MM-DD" (–∑ –ª—ñ–¥–∏—Ä. –Ω—É–ª–µ–º: "11-02")
    const [mmStr, ddStr] = this.birthdayConfig.birthday.split('-');
    const month = Number(mmStr);
    const day = Number(ddStr);

    // –¶—ñ–ª—å ‚Äî 00:01 —É TZ –ö–∏—î–≤–∞
    let target = DateTime.fromObject(
      { year: now.year, month, day, hour: 0, minute: 1 },
      { zone: tz },
    );

    // –Ø–∫—â–æ –≤–∂–µ –º–∏–Ω—É–ª–æ ‚Äî –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–∫ (–≤—Ä–∞—Ö—É—î–º–æ 29 –ª—é—Ç–æ–≥–æ)
    if (target < now) {
      const nextYear = now.year + 1;
      const tryNext = DateTime.fromObject(
        { year: nextYear, month, day, hour: 0, minute: 1 },
        { zone: tz },
      );
      // –Ø–∫—â–æ –¥–∞—Ç–∞ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 02-29 —É –Ω–µ–≤–∏—Å–æ–∫–æ—Å–Ω–∏–π) ‚Äî –ø—Ä–æ–∫–∏–Ω—å –Ω–∞ 28 –ª—é—Ç–æ–≥–æ
      target = tryNext.isValid
        ? tryNext
        : DateTime.fromObject(
            { year: nextYear, month: 2, day: 28, hour: 0, minute: 1 },
            { zone: tz },
          );
    }

    const diff = target.diff(now, ['days', 'hours', 'minutes']).toObject();
    const totalMinutes = Math.max(
      0,
      Math.floor(target.diff(now, 'minutes').minutes || 0),
    );
    const days = Math.floor(totalMinutes / (60 * 24));
    const hours = Math.floor((totalMinutes % (60 * 24)) / 60);
    const minutes = totalMinutes % 60;

    const isBirthday =
      now.year === target.year &&
      now.hasSame(target, 'day') &&
      now.hasSame(target, 'month');

    return { days, isBirthday, hours, minutes };
  }

  formatCountdownMessage(countdown: {
    days: number;
    isBirthday: boolean;
    hours: number;
    minutes: number;
  }): string {
    this.logger.debug(
      `Formatting countdown message: days=${countdown.days}, hours=${countdown.hours}, minutes=${countdown.minutes}, isBirthday=${countdown.isBirthday}`,
    );

    if (countdown.isBirthday) {
      const message = this.birthdayConfig.birthdayMessage.replace(
        '{name}',
        this.birthdayConfig.name,
      );
      this.logger.debug(`Birthday message: "${message}"`);
      return (
        message ||
        `–ü—Ä–∏–≤—ñ—Ç, –ª–µ–¥—ñ! üëã‚ú®\n\nüéâüéÇ –ó –î–ù–ï–ú –ù–ê–†–û–î–ñ–ï–ù–ù–Ø, ${this.birthdayConfig.name}! üéÇüéâ\n\n–ë–∞–∂–∞—é —Ç–æ–±—ñ –±–µ–∑–º–µ–∂–Ω–æ–≥–æ —â–∞—Å—Ç—è, –∑–¥–æ—Ä–æ–≤'—è —Ç–∞ —É—Å–º—ñ—à–æ–∫! –ù–µ—Ö–∞–π —Ü–µ–π –¥–µ–Ω—å –±—É–¥–µ —Å–ø–æ–≤–Ω–µ–Ω–∏–π —Ä–∞–¥–æ—Å—Ç—ñ —Ç–∞ —á—É–¥–æ–≤–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤! üí´‚ú®`
      );
    }

    // If less than 1 day remaining, show hours
    if (countdown.days === 0) {
      if (countdown.hours > 1) {
        return `‚è∞ –õ–∏—à–∏–ª–æ—Å—å ${countdown.hours} ${this.hoursWord(countdown.hours)} –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è ${this.birthdayConfig.name}!`;
      } else if (countdown.hours === 1) {
        return `üî• –û—Å—Ç–∞–Ω–Ω—è –≥–æ–¥–∏–Ω–∞! –ó–∞ 1 –≥–æ–¥–∏–Ω—É —Å–≤—è—Ç–∫—É—î–º–æ ${this.birthdayConfig.name}!`;
      } else if (countdown.minutes > 1) {
        return `‚ö° –õ–∏—à–∏–ª–æ—Å—å ${countdown.minutes} ${this.minutesWord(countdown.minutes)} –¥–æ —Å—Ç–∞—Ä—Ç—É —Å–≤—è—Ç–∞ ${this.birthdayConfig.name}!`;
      } else if (countdown.minutes === 1) {
        return `üöÄ –û—Å—Ç–∞–Ω–Ω—è —Ö–≤–∏–ª–∏–Ω–∞ ‚Äî –≥–æ—Ç—É—î–º–æ—Å—å –≤—ñ—Ç–∞—Ç–∏ ${this.birthdayConfig.name}!`;
      }
      return this.birthdayConfig.birthdayMessage.replace(
        '{name}',
        this.birthdayConfig.name,
      );
    }

    // Choose message type based on days remaining
    let messagePool: string[] = [];
    let messageType = '';

    if (countdown.days <= 3) {
      // 3 days or less - only regular daily messages
      messagePool = this.birthdayConfig.dailyMessages;
      messageType = 'daily';
    } else if (countdown.days <= 7) {
      // 4-7 days - randomly choose between urgent and regular messages (50/50 chance)
      const useUrgentMessages = Math.random() < 0.5;
      messagePool = useUrgentMessages
        ? this.birthdayConfig.oneWeekMessages
        : this.birthdayConfig.dailyMessages;
      messageType = useUrgentMessages ? 'oneWeek' : 'daily';
    } else if (countdown.days <= 14) {
      // 2 weeks or less - gift preparation messages
      // Randomly choose between gift messages and regular messages (50/50 chance)
      const useGiftMessages = Math.random() < 0.5;
      messagePool = useGiftMessages
        ? this.birthdayConfig.twoWeeksMessages
        : this.birthdayConfig.dailyMessages;
      messageType = useGiftMessages ? 'twoWeeks' : 'daily';
    } else {
      // More than 2 weeks - regular daily messages
      messagePool = this.birthdayConfig.dailyMessages;
      messageType = 'daily';
    }

    // Ensure we have messages
    if (!messagePool || messagePool.length === 0) {
      this.logger.warn(`No ${messageType} messages configured, using fallback`);
      return `–ü—Ä–∏–≤—ñ—Ç, –ª–µ–¥—ñ! üëã‚ú®\n\nüéâ –¢—ñ–ª—å–∫–∏ ${countdown.days} –¥–Ω—ñ–≤ –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è ${this.birthdayConfig.name}! üéÇ\n\n–ù–µ –º–æ–∂—É –¥–æ—á–µ–∫–∞—Ç–∏—Å—è —Å–≤—è—Ç–∞! üí´`;
    }

    const randomMessage =
      messagePool[Math.floor(Math.random() * messagePool.length)];

    this.logger.debug(`Selected ${messageType} message: "${randomMessage}"`);

    const formattedMessage = randomMessage
      .replace('{days}', countdown.days.toString())
      .replace('{daysWord}', this.daysWord(countdown.days))
      .replace('{name}', this.birthdayConfig.name);

    this.logger.debug(`Formatted message: "${formattedMessage}"`);

    // Ensure we don't return an empty message
    return (
      formattedMessage ||
      `–ü—Ä–∏–≤—ñ—Ç, –ª–µ–¥—ñ! üëã‚ú®\n\nüéâ –¢—ñ–ª—å–∫–∏ ${countdown.days} –¥–Ω—ñ–≤ –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è ${this.birthdayConfig.name}! üéÇ\n\n–ù–µ –º–æ–∂—É –¥–æ—á–µ–∫–∞—Ç–∏—Å—è —Å–≤—è—Ç–∞! üí´`
    );
  }

  private scheduleDailyMessages() {
    // Schedule daily message at 12 PM (noon) using Luxon timezone
    const timezone = this.birthdayConfig.timezone || 'Europe/Kyiv';

    cron.schedule(
      '0 12 * * *',
      async () => {
        try {
          const countdown = this.calculateCountdown();

          if (countdown.isBirthday) {
            await this.sendBirthdayMessage();
          } else {
            await this.sendDailyCountdown(countdown);
          }
        } catch (error) {
          this.logger.error('Error sending scheduled message:', error);
        }
      },
      {
        timezone: timezone,
      },
    );

    // Schedule a cron job to run every minute
    cron.schedule(
      '* * * * *',
      async () => {
        this.logger.debug(
          `Ping | Chat ID: ${this.birthdayConfig.chatId || 'N/A'} | Channel ID: ${this.birthdayConfig.channelId || 'N/A'} | Name: ${this.birthdayConfig.name || 'N/A'} | Birthday: ${this.birthdayConfig.birthday || 'N/A'}`
        );
      },
      {
        timezone: timezone,
      },
    );

    // Schedule birthday message at exactly 00:01
    cron.schedule(
      '1 0 * * *', // 00:01 every day
      async () => {
        try {
          const countdown = this.calculateCountdown();

          if (countdown.isBirthday) {
            await this.sendBirthdayMessage();
          }
        } catch (error) {
          this.logger.error('Error sending birthday message at 00:01:', error);
        }
      },
      {
        timezone: timezone,
      },
    );

    this.logger.log('Message scheduling set up successfully!');
  }

  // Helper method to create timezone-aware cron expressions using Luxon
  private createTimezoneAwareSchedule(
    cronExpression: string,
    callback: () => Promise<void>,
  ) {
    const timezone = this.birthdayConfig.timezone || 'Europe/Kyiv';

    return cron.schedule(cronExpression, callback, {
      timezone: timezone,
    });
  }

  // Method to schedule a message at a specific DateTime
  private scheduleAtDateTime(
    dateTime: DateTime,
    callback: () => Promise<void>,
  ) {
    const now = DateTime.now().setZone(
      this.birthdayConfig.timezone || 'Europe/Kyiv',
    );
    const delay = dateTime.diff(now).milliseconds;

    if (delay > 0) {
      setTimeout(async () => {
        try {
          await callback();
        } catch (error) {
          this.logger.error('Error in scheduled DateTime callback:', error);
        }
      }, delay);

      this.logger.log(`Scheduled message for ${dateTime.toISO()}`);
    } else {
      this.logger.warn(
        `Scheduled time ${dateTime.toISO()} is in the past, skipping`,
      );
    }
  }

  // Method to reschedule all messages based on current timezone
  private rescheduleMessages() {
    const timezone = this.birthdayConfig.timezone || 'Europe/Kyiv';
    const now = DateTime.now().setZone(timezone);

    this.logger.log(`Rescheduling messages for timezone: ${timezone}`);
    this.logger.log(`Current time: ${now.toISO()}`);

    // This could be used to dynamically reschedule based on timezone changes
    // For now, we'll keep the existing cron approach but with better timezone handling
  }

  private async sendDailyCountdown(countdown: {
    days: number;
    isBirthday: boolean;
    hours: number;
    minutes: number;
  }) {
    const message = this.formatCountdownMessage(countdown);

    // Validate message is not empty
    if (!message || message.trim() === '') {
      this.logger.error('Message is empty, skipping send');
      return;
    }

    try {
      await this.sendMessageToChannel(message);
      this.logger.log(`Daily countdown sent: ${countdown.days} days remaining`);
    } catch (error) {
      this.logger.error('Error sending daily countdown:', error);
    }
  }

  private async sendHourlyCountdown(countdown: {
    days: number;
    isBirthday: boolean;
    hours: number;
    minutes: number;
  }) {
    const message = this.formatCountdownMessage(countdown);

    // Validate message is not empty
    if (!message || message.trim() === '') {
      this.logger.error('Message is empty, skipping send');
      return;
    }

    try {
      await this.sendMessageToChannel(message);
      this.logger.log(
        `Hourly countdown sent: ${countdown.hours} hours remaining`,
      );
    } catch (error) {
      this.logger.error('Error sending hourly countdown:', error);
    }
  }

  private async sendBirthdayMessage() {
    try {
      // Prepare birthday message
      const birthdayMessage =
        this.birthdayConfig.birthdayMessage.replace(
          '{name}',
          this.birthdayConfig.name,
        ) || `üéâüéÇ HAPPY BIRTHDAY ${this.birthdayConfig.name}! üéÇüéâ`;

      // Validate message is not empty
      if (!birthdayMessage || birthdayMessage.trim() === '') {
        this.logger.error('Birthday message is empty, skipping send');
        return;
      }

      // Send birthday message
      await this.sendMessageToChannel(birthdayMessage);

      // Send birthday GIF if configured
      if (this.birthdayConfig.birthdayGifUrl) {
        await this.sendAnimationToChannel(this.birthdayConfig.birthdayGifUrl);
      }

      this.logger.log('Birthday message sent successfully!');
    } catch (error) {
      this.logger.error('Error sending birthday message:', error);
    }
  }

  // Method to send message to channel (preferred) or chat
  private async sendMessageToChannel(message: string) {
    const targetId =
      this.birthdayConfig.channelId || this.birthdayConfig.chatId;

    if (!targetId) {
      this.logger.warn(
        'No channel ID or chat ID configured. Cannot send message.',
      );
      return;
    }

    try {
      await this.bot.telegram.sendMessage(targetId, message);
      const channelInfo =
        this.birthdayConfig.channelTitle ||
        this.birthdayConfig.channelUsername ||
        'channel';
      this.logger.log(`Message sent to ${channelInfo} (${targetId})`);
    } catch (error) {
      this.logger.error(`Error sending message to ${targetId}:`, error);
      throw error;
    }
  }

  // Method to send animation to channel (preferred) or chat
  private async sendAnimationToChannel(animationUrl: string) {
    const targetId =
      this.birthdayConfig.channelId || this.birthdayConfig.chatId;

    if (!targetId) {
      this.logger.warn(
        'No channel ID or chat ID configured. Cannot send animation.',
      );
      return;
    }

    try {
      await this.bot.telegram.sendAnimation(targetId, animationUrl);
      const channelInfo =
        this.birthdayConfig.channelTitle ||
        this.birthdayConfig.channelUsername ||
        'channel';
      this.logger.log(`Animation sent to ${channelInfo} (${targetId})`);
    } catch (error) {
      this.logger.error(`Error sending animation to ${targetId}:`, error);
      throw error;
    }
  }

  // Method to manually trigger countdown check
  async checkAndSendCountdown() {
    const countdown = this.calculateCountdown();

    if (this.birthdayConfig.channelId || this.birthdayConfig.chatId) {
      if (countdown.isBirthday) {
        await this.sendBirthdayMessage();
      } else if (countdown.days === 0 && countdown.hours <= 24) {
        await this.sendHourlyCountdown(countdown);
      } else {
        await this.sendDailyCountdown(countdown);
      }
    } else {
      this.logger.warn(
        'No channel ID or chat ID configured. Cannot send countdown message.',
      );
    }
  }

  // Method to update birthday configuration
  updateBirthdayConfig(newConfig: Partial<BirthdayConfig>) {
    this.birthdayConfig = { ...this.birthdayConfig, ...newConfig };
    this.logger.log('Birthday configuration updated');
  }

  // Method to get current chat ID
  getCurrentChatId(): string | undefined {
    return this.birthdayConfig.chatId;
  }

  // Method to set chat ID manually
  setChatId(chatId: string) {
    this.birthdayConfig.chatId = chatId;
    this.logger.log(`Chat ID set to: ${chatId}`);
  }

  // Method to get current channel information
  getCurrentChannelInfo(): { id?: string; title?: string; username?: string } {
    return {
      id: this.birthdayConfig.channelId,
      title: this.birthdayConfig.channelTitle,
      username: this.birthdayConfig.channelUsername,
    };
  }

  // Method to set channel information manually
  setChannelInfo(
    channelId: string,
    channelTitle?: string,
    channelUsername?: string,
  ) {
    this.birthdayConfig.channelId = channelId;
    this.birthdayConfig.channelTitle = channelTitle;
    this.birthdayConfig.channelUsername = channelUsername;
    this.logger.log(
      `Channel info set: ${channelTitle || 'Unknown'} (${channelId})`,
    );
    if (channelUsername) {
      this.logger.log(`Channel username: ${channelUsername}`);
    }
  }

  // Method to get the preferred target (channel first, then chat)
  getPreferredTarget(): string | undefined {
    return this.birthdayConfig.channelId || this.birthdayConfig.chatId;
  }
}
